<f:subview xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:c="http://java.sun.com/jstl/core"
    xmlns:nxd="http://nuxeo.org/nxweb/document"
    xmlns:nxl="http://nuxeo.org/nxforms/layout"
    xmlns:nxu="http://nuxeo.org/nxweb/util"
    xmlns:nxr="http://nuxeo.org/nxweb/resources">

  <h:outputScript src="/bower_components/webcomponentsjs/webcomponents-lite.js"
      target="" />

  <nxr:import src="/nuxeo-labs-geomap-filter-ui/elements/elements.vulcanized.html"
      target="" />

  <style>
    .hidden {
      display: none;
    }
  </style>

  <ui:remove>
    <!--
    * The input field is hidden because the map is used to choose the value.
    * I placed it outside the <template> element to make it easier to access (if
    * it's inside the template then it becomes part of shadow DOM).
    -->
  </ui:remove>

  <div class="hidden">
    <h:inputText class="selected_state_input"
        value="#{fieldOrValue}">
    </h:inputText>
  </div>

  <template is="dom-bind">

    <nuxeo-connection url="/nuxeo"></nuxeo-connection>

    <ui:remove>
      <!--
      * Note: auto="true" is bad Polymer form but is required in order for Nuxeo
      * to validate the syntax.
      -->
    </ui:remove>
    <nuxeo-page-provider auto="true"
        provider="#{contentView.pageProvider.name}"
        params="[[_computeParams()]]"
        aggregations="{{data}}">
    </nuxeo-page-provider>

    <nuxeo-labs-map-chart title="#{widget.properties['title']}"
        region="#{widget.properties['region']}"
        resolution="#{widget.properties['resolution']}"
        selected-value="{{selectedValue}}"
        data="[[_rowsForMap(data,'#{widget.properties['aggregateName']}')]]"
        on-click="_handleClick">
    </nuxeo-labs-map-chart>

    <div>Selected: <span id="selected-state-span">[[selectedValue]]</span></div>

  </template>

  <script>
    /**
     * The hidden &lt;input&gt; element is what performs the actual filtering.
     */
    var input = document.querySelector(".selected_state_input");

    var template = document.querySelector("template");

    /**
     * Get the previously selected value so that when the content is refreshed
     * the value is not lost.
     */
    template.selectedValue = input.value;

    template._handleClick = function(e) {
      if (template.selectedValue) {
        input.value = (template.selectedValue);
      };
    };

    template._rowsForMap = function(data, aggregateName) {
      if (data && data.aggregations && data.aggregations[aggregateName] && data.aggregations[aggregateName].buckets ) {
        var oldData = data.aggregations[aggregateName].buckets;
        var newData = oldData.map(function(e) {
          var res = [e.key];
          if (Array.isArray(e.docCount)) {
            e.docCount.forEach(function(v) {
              res.push(v.value);
            });
          } else {
            res.push(e.docCount);
          }
          return res;
        });
        newData.unshift(["State", "Count"]);
        return newData;
      }
    };

    /**
     * `nuxeo-repository-data` expects an object for the `where` attribute.
     */
    template._computeFilter = function() {
      var parentId = "#{currentDocument.id}";
      return {
        //'ecm:isCheckedInVersion': 0
        'ecm:parentId': parentId,
        "ecm:isProxy": false,
        "ecm:isVersion": false
      }
    };

    /**
     * `nuxeo-page-provider` expects an object for the `params` attribute.
     */
    template._computeParams = function() {
      var parentId = "#{currentDocument.id}";
      return [
        parentId
      ]
    };
  </script>

</f:subview>
